import 'package:flutter/material.dart';

class CustomTextFormField extends StatelessWidget {
  final Function(String) onSaved;
  // final String? Function(String) onValidate;
  final String regEx;
  final String hintText;
  final String errorMessage;
  final String? title;
  final TextInputType? keyboardType;
  final bool? obscureText;
  final TextCapitalization? textCapitalization;
  final String? prefixText;
  final TextEditingController? passwordController;
  final TextEditingController? controller;
  final BuildContext context;
  CustomTextFormField({
    super.key,
    required this.onSaved,
    required this.regEx,
    required this.hintText,
    required this.errorMessage,
    required this.context,
    // required this.onValidate,
    this.obscureText,
    this.title,
    this.keyboardType,
    this.textCapitalization,
    this.prefixText,
    this.passwordController,
    this.controller,
  });
  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Container(
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(8),
          border: Border.all(
            color: Colors.grey,
          ),
        ),
        child: Padding(
          padding: const EdgeInsets.symmetric(vertical: 4.0),
          child: TextFormField(
            decoration: InputDecoration(
              prefixText: prefixText ?? null,
              labelText: title,
              fillColor: Colors.white,
              filled: true,
              border: InputBorder.none,
            ),
            textCapitalization: textCapitalization ?? TextCapitalization.none,
            keyboardType: keyboardType ?? TextInputType.text,
            cursorHeight: 18,
            validator: (value) {
              if (value!.isEmpty) {
                return errorMessage;
              }
              if (passwordController != null && controller != null) {
                if (passwordController!.text != controller!.text) {
                  controller!.clear();
                  return 'Passwords do not match';
                }
              }
              if (regEx.isNotEmpty) {
                final regExp = RegExp(regEx);
                if (!regExp.hasMatch(value)) {
                  return title;
                }
              }

              return null;
            },
            onSaved: (value) {
              if (value!.isEmpty) {}
              onSaved(value);
            },
            obscureText: obscureText ?? false,
            controller: controller,
          ),
        ),
      ),
    );
  }
}
